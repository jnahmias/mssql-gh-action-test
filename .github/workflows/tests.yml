name: Tests

on:
  push

jobs:

  # Generate one-time random passwords for MSSQL
  gen-passwords:
    runs-on: ubuntu-latest
    outputs:
      SAPW:  ${{ steps.genpw.outputs.sapw  }}
      APPPW: ${{ steps.genpw.outputs.apppw }}
    steps:
      - name: install pre-requisites
        run: sudo apt install --quiet --assume-yes apg
      - name: generate database passwords
        id: genpw
        run: |
          RAND_PW=$(apg -a 1 -n 1 -m 32 -M SNCL -E \''@:;[]{}()\"')
          #printf "::add-mask::%s\n" "$RAND_PW"
          printf "::set-output name=sapw::%s\n" "$RAND_PW"
          echo "Generated password has character class distribution:"
          printf '%s' "$RAND_PW" \
            | sed -e 's/[[:lower:]]/a/g' \
                  -e 's/[[:upper:]]/A/g' \
                  -e 's/[[:digit:]]/0/g' \
                  -e 's/[^Aa0]/*/g' \
                  -e 's/./&\n/g' \
            | sort | uniq -c
          RAND_PW=$(apg -a 1 -n 1 -m 32 -M SNCL -E \''@:;[]{}()\"')
          #printf "::add-mask::%s\n" "$RAND_PW"
          printf "::set-output name=apppw::%s\n" "$RAND_PW"
          echo "Generated password has character class distribution:"
          printf '%s' "$RAND_PW" \
            | sed -e 's/[[:lower:]]/a/g' \
                  -e 's/[[:upper:]]/A/g' \
                  -e 's/[[:digit:]]/0/g' \
                  -e 's/[^Aa0]/*/g' \
                  -e 's/./&\n/g' \
            | sort | uniq -c

  pw-test:
    runs-on: ubuntu-latest
    needs: gen-passwords
    env:
      APP_PW: ${{ needs.gen-passwords.outputs.APPPW }}
      SA_PW:  ${{ needs.gen-passwords.outputs.SAPW  }}
    steps:
      - name: check passing of generated passwords to another job
        run: |
          printf 'Got SA_PW length %s, distribution:\n' \
            $(printf '%s' "$SA_PW" | wc -c)
          printf '%s' "$SA_PW" \
            | sed -e 's/[[:lower:]]/a/g' \
                  -e 's/[[:upper:]]/A/g' \
                  -e 's/[[:digit:]]/0/g' \
                  -e 's/[^Aa0]/*/g' \
                  -e 's/./&\n/g' \
            | sort | uniq -c

          printf 'Got APP_PW length %s, distribution:\n' \
            $(printf '%s' "$APP_PW" | wc -c)
          printf '%s' "$APP_PW" \
            | sed -e 's/[[:lower:]]/a/g' \
                  -e 's/[[:upper:]]/A/g' \
                  -e 's/[[:digit:]]/0/g' \
                  -e 's/[^Aa0]/*/g' \
                  -e 's/./&\n/g' \
            | sort | uniq -c

  ms-test:

    runs-on: ubuntu-latest

    needs: gen-passwords
    env:
      APP_DB: myTestDB
      APP_PW: ${{ needs.gen-passwords.outputs.APPPW }}
      APP_USER: test_app_user
      SA_PW:  ${{ needs.gen-passwords.outputs.SAPW  }}
      SQLCMDSERVER: 127.0.0.1

    # Setup bare MSSQL database instance
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2017-latest
        env:
          ACCEPT_EULA: Y
          MSSQL_SA_PASSWORD: ${{ env.SA_PW }}
          MSSQL_PID: Developer
          MSSQL_COLLATION: SQL_Latin1_General_CP1_CI_AS
        options: >-
          --name mssql
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -b -o /dev/null -S 127.0.0.1 -U sa -P \"${MSSQL_SA_PASSWORD}\" -Q 'SELECT 1;'"
          --health-interval 60s
          --health-timeout 30s
          --health-start-period 20s
          --health-retries 5
        ports:
        - 1433:1433

    steps:
      - uses: actions/checkout@v2
      - name: create database and login/user for app access
        env:
          SQLCMDDBNAME: master
          SQLCMDUSER: sa
          SQLCMDPASSWORD: ${{ env.SA_PW }}
        run: sqlcmd -b -m-1 -p -W -i create_db.sql
      - name: test connect to app database using app login/user
        env:
          SQLCMDDBNAME: ${{ env.APP_DB }}
          SQLCMDUSER: ${{ env.APP_USER }}
          SQLCMDPASSWORD: ${{ env.APP_PW }}
        run: sqlcmd -b -m-1 -p -W -Q "SELECT
              ServerName = @@SERVERNAME
            , spid = @@SPID
            , login = SUSER_NAME()
            , DatabaseName = DB_NAME()
            , DBUser = USER_NAME()
          ;"

# vim: set ts=2 sw=2 et si:
