name: Tests

on:
  push

jobs:

  # Generate one-time random passwords for MSSQL
  gen-passwords:
    runs-on: ubuntu-latest
    outputs:
      SAPW:  ${{ steps.genpw.outputs.sapw  }}
      APPPW: ${{ steps.genpw.outputs.apppw }}
    steps:
      - name: install pre-requisites
        run: sudo apt install --quiet --assume-yes apg
      - name: generate database passwords
        id: genpw
        run: |
          printf '::set-output name=sapw::%s\n' \
            $(apg -a 1 -n 1 -m 32 -M SNCL -E "~|@:;[]{}/()<>\\'\"")
          printf '::set-output name=apppw::%s\n' \
            $(apg -a 1 -n 1 -m 32 -M SNCL -E "~|@:;[]{}/()<>\\'\"")

  ms-test:

    runs-on: ubuntu-latest

    needs: gen-passwords
    env:
      SAPW:  ${{ needs.gen-passwords.outputs.SAPW  }}
      APPPW: ${{ needs.gen-passwords.outputs.APPPW }}

    # Setup bare MSSQL database instance
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2017-latest
        env:
          ACCEPT_EULA: Y
          MSSQL_SA_PASSWORD: ${{ env.SAPW }}
          MSSQL_PID: Developer
          MSSQL_COLLATION: SQL_Latin1_General_CP1_CI_AS
        ports:
        - 1433:1433

    steps:
      - name: show Docker processes
        run: |
          docker ps -a
      - name: test connect to database as SA
        env:
          SQLCMDSERVER: localhost
          SQLCMDDBNAME: master
          SQLCMDUSER: sa
          SQLCMDPASSWORD: ${{ env.SAPW }}
        run: sqlcmd -b -m-1 -p1 -Q "SELECT
              ServerName = @@SERVERNAME
            , spid = @@SPID
            , login = SUSER_NAME()
            , DatabaseName = DB_NAME()
            , DBUser = USER_NAME()
          ;"
      - name: test reading env vars in sqlcmd
        env:
          SQLCMDSERVER: localhost
          SQLCMDDBNAME: master
          SQLCMDUSER: sa
          SQLCMDPASSWORD: ${{ env.SAPW }}
        run: sqlcmd -b -m-1 -p1 -Q "SELECT N'$(APPPW)' AS app_password;"


# vim: set ts=2 sw=2 et si:
